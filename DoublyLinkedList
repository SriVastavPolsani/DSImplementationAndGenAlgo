using System;
					
public class Node <T> {
		public T data;
		public Node <T> prev, next;
		public Node(T data, Node <T> prev, Node <T> next){
			this.data = data;
			this.prev = prev;
			this.next = next;
		}
		public override string ToString() {
			return data.ToString();
		}
	}

public class LinkedList <T>
{
	private int length = 0;
	private Node <T> head = null;
	private Node <T> tail = null;
		
	public void clear() {
		Node <T> trav;
		trav = head;
		
		while(trav != null)
		{
			Node <T> next = trav.next;
			trav.next = trav.prev = null;
			trav.data = default(T);		
			trav = next;
		}
		head = tail = trav = null;
		length = 0;
	}
	
	public int size() {
		return length;
	}
	
	public bool isEmpty() {
		return size() == 0;
	}
	
	public void add(T elem)
	{
		addLast(elem);	
	}
	
	public void addFirst(T elem)
	{
		if(isEmpty())
			head = tail = new Node<T>(elem, null, null);
		else {
			Node <T> newNode = new Node <T>(elem, null,head);
			head.prev = newNode;
			head = head.prev;
		}
	length++;				
	}
	
	public void addLast(T elem)
	{
		if(isEmpty())
			head = tail = new Node<T>(elem, null, null);
		else {
			Node <T> newNode = new Node <T>(elem, tail,null);
			tail.next = newNode;
			tail = tail.next;
		}
	length++;				
	}
	
	public T peekFirst()
	{
		if(isEmpty())
			throw new MissingMemberException("List is Empty.");
		return head.data;	
	}
	
	public T peekLast()
	{
		if(isEmpty())
			throw new MissingMemberException("List is Empty.");
		return tail.data;	
	}
	
	public T removeFirst() {
		if(isEmpty())
			throw new MissingMemberException("List is Empty.");
		
		T data = head.data;
		head = head.next;
		--length;
		
		if(isEmpty())
			tail = null;
		
		//free up memory
		else
		{
		head.prev = null;		
		}
		
		return data;
	}
	
	public T removeLast() {
	if(isEmpty())
			throw new MissingMemberException("List is Empty.");
	T data = tail.data;
	tail = tail.prev;
	
	if(isEmpty())
		head = null;
		
	//empty data	
	else
	{
		tail.next = null;
	}
	
	return data;			
	}
	
	public T removeNode(Node <T> node) {
		if(node.prev == null) removeFirst();
		if(node.next == null) removeLast();
		
		node.prev.next = node.next;
		node.next.prev = node.prev;
		
		T data = node.data;
		
		node.data = default(T);
		node.prev = node.next = null;
		length--;
				
		return data;
	}
	
	public T removeAt(int index){
		int i;
		Node <T> trav;
		
		if(index < index/2){
			for(i = 0, trav = head; i < index; i++)
			{
				trav = trav.next;
			}
		}
		else
		{
			for(i = length-1, trav = tail; i > index; i--)
			{
				trav = trav.prev;
			}	
		}
		removeNode(trav);
	}
	
	public bool remove(Object obj)
	{
		Node <T> trav = head;
		
		if(obj == null)
		{
			for(trav = head; trav != null; trav = trav.next)
			{
				if(trav.data == null)
				{
					remove(trav);
					return true;
				}
			}
		}
		else
		{
			for(trav = head; trav != null; trav = trav.next)
			{
				if(obj.Equals(trav.data))
				{
					remove(trav);
					return true;
				}
			}
		}
		return false;
	}
	
	public int indexOf(Object obj)
	{
		int i = 0;
		Node <T> trav = head;
		
		if(obj == null)
		{
			for(trav = head; trav != null; trav = trav.next, i++)
			{
				if(trav.data == null)
				{
					return i;
				}
			}
		}
		else
		{
			for(trav = head; trav != null; trav = trav.next,i++)
			{
				if(obj.Equals(trav.data))
				{
					return i;
				}
			}
		}
		return -1;
	}
	
	public bool contains(object obj)
	{
		return indexOf(obj) != -1;
	}
	
}

//Implementation 2 - JAVA
// Definition for doubly-linked list.
class DoublyListNode {
    int val;
    DoublyListNode next, prev;
    DoublyListNode(int x) {val = x;}
}

class MyLinkedList {
    private DoublyListNode head;

    /** Initialize your data structure here. */
    public MyLinkedList() {
        head = null;
    }
    
    private DoublyListNode getNode(int index) {
        DoublyListNode curr = head;
        for(int i = 0; i < index && curr != null; i++) {
            curr = curr.next;
        }
        return curr;
    }
    
    private DoublyListNode getTail() {
        DoublyListNode curr = head;        
        while(curr != null && curr.next != null)
        {
            curr = curr.next;
        }
        return curr;
    }
    
    /** Get the value of the index-th node in the linked list. If the index is invalid, return -1. */
    public int get(int index) {
        DoublyListNode curr = getNode(index);
        return curr == null ? -1 : curr.val;        
    }
    
    /** Add a node of value val before the first element of the linked list. After the insertion, the new node will be the first node of the linked list. */
    public void addAtHead(int val) {
        DoublyListNode curr = new DoublyListNode(val);
        curr.next = head;
        if(head != null)
            head.prev = curr;
        head = curr;
        return;        
    }
    
    /** Append a node of value val to the last element of the linked list. */
    public void addAtTail(int val) {
        if(head == null) {
            addAtHead(val);
            return;
        }
        DoublyListNode prev = getTail();
        DoublyListNode curr = new DoublyListNode(val);
        prev.next = curr;
        curr.prev = prev;
    }
    
    /** Add a node of value val before the index-th node in the linked list. If index equals to the length of linked list, the node will be appended to the end of linked list. If index is greater than the length, the node will not be inserted. */
    public void addAtIndex(int index, int val) {
        if(index == 0){
            addAtHead(val);
            return;
        }
        DoublyListNode prev = getNode(index-1);
        if(prev == null) {
            return;
        }
        DoublyListNode curr = new DoublyListNode(val);
        DoublyListNode next = prev.next;
        curr.prev = prev;
        curr.next = next;
        prev.next = curr;
        if(next != null) {
            next.prev = curr;
        }
    }
    
    /** Delete the index-th node in the linked list, if the index is valid. */
    public void deleteAtIndex(int index) {
        DoublyListNode curr = getNode(index);
        if(curr == null) {
            return;
        }
        
        DoublyListNode prev = curr.prev;
        DoublyListNode next = curr.next;
        if(prev != null) {
            prev.next = next;
        } else {
            head = next;
        }
        if(next != null) {
            next.prev = prev;
        }
    }
}

/**
 * Your MyLinkedList object will be instantiated and called as such:
 * MyLinkedList obj = new MyLinkedList();
 * int param_1 = obj.get(index);
 * obj.addAtHead(val);
 * obj.addAtTail(val);
 * obj.addAtIndex(index,val);
 * obj.deleteAtIndex(index);
 */

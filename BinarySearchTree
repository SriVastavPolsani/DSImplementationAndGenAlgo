/**
 * This file contains an implementation of a Binary Search Tree (BST) Any comparable data is allowed
 * within this tree (numbers, strings, comparable Objects, etc...). Supported operations include
 * adding, removing, height, and containment checks.
 *
 */

public class BinarySearchTree <T extends Comparable<T>> {

    //Tracks the number of nodes in the BST
    private int nodeCount = 0;

    //This BST is a rooted so we maintain the root node
    private Node root = null;

    //Internal Node containing Node references
    //and the actual Node data
    private class Node{
        T data;
        Node left, right;
        public Node (Node left, Node right, T elem) {
            this.data = elem;
            this.left = left;
            this.right = right;
        }
    }

    //Check if the binary tree is empty
    public boolean IsEmpty() {
        return size() == 0;
    }

    //returns the number of nodes in the binary tree
    public int size() {
        return nodeCount;
    }

    //Adds an element to the binary tree. Returns true
    // if we successfully perform the insertion
    public boolean add(T elem) {

        //check if the value already exists in the binary search tree.
        //if it does ignore it.
        if(contains(elem)) {
            return false;

            //otherwise add this element to the binary search tree
        } else {
            root = add(root, elem);
            nodeCount++;
            return true;
        }
    }

    //private method to add a value to the binary tree.
    private Node add(Node node, T elem) {

        //Base case: found a leaf node.
        if(node == null) {
            node = new Node (null, null, elem);
        } else  {
            //place lower elements values in left subtree
            if(elem.compareTo(node.data) < 0) {
                node.left = add(node.left, elem);
            } else  {
                node.right = add(node.right, elem);
            }
        }
        return node;
    }

    //Remove a value from this binary tree if it exists
    private boolean remove(T elem){

        //Make sure the node we want to remove
        //actually exists before we remove it
        if(contains(elem)) {
            root = remove(root, elem);
            nodeCount--;
            return true;
        }
        return false;
    }

    private Node remove(Node node, T elem) {
        if (node == null)
            return null;

        int cmp = elem.compareTo(node.data);

        //Dig into the left subtree, the value we are looking is
        //smaller than the current value
        if(cmp < 0) {
            node.left = remove(node.left, elem);
        }
        //Dig into the right subtree, the value we are looking
        //is greater than the current value
        else if(cmp > 0) {
            node.right = remove(node.right, elem);
        }
        // Found the node we wish to remove
        else  { // This is the case with only a right subtree or
            // no subtree at all. In this situation just
            // swap the node we wish to remove with its right child.
            if(node.left == null)
                return node.right;
                // This is the case with only a left subtree or
                // no subtree at all. In this situation just
                // swap the node we wish to remove with its left child.
            else if(node.right == null) {
                return node.left;
            }
            // When removing a node from a binary tree with two links the
            // successor of the node being removed can either be the largest
            // value in the left subtree or the smallest value in the right
            // subtree. In this implementation I have decided to find the
            // smallest value in the right subtree which can be found by
            // traversing as far left as possible in the right subtree.
            else {
                // Find the leftmost node in the right subtree
                Node tmp = findMin(node.right);
                // Swap the data
                node.data = tmp.data;
                // Go into the right subtree and remove the leftmost node we
                // found and swapped data with. This prevents us from having
                // two nodes in our tree with the same value.
                node.right = remove(node.right, tmp.data);

                // If instead we wanted to find the largest node in the left
                // subtree as opposed to smallest node in the right subtree
                // here is what we would do:
                // Node tmp = findMax(node.left);
                // node.data = tmp.data;
                // node.left = remove(node.left, tmp.data);
            }
        }
        return node;
    }

    private Node findMin(Node node) {
        while(node.left != null) node = node.left;
        return node;
    }

    private Node findMax(Node node) {
        while(node.right != null) node = node.right;
        return node;
    }

    public boolean contains(T elem) {
        return contains(root, elem);
    }

    private boolean contains(Node node, T elem) {
        //Base case: reached bottom. value not found.
        if(node == null)
            return false;

        int cmp = elem.compareTo(node.data);

        //dig into the left subtree
        //value we are looking for is smaller than the current value
        if(cmp < 0) return contains(node.left, elem);
        //dig into the right sub tree
        //value we are looking for is greater than the current value
        else if(cmp > 0) return contains(node.right, elem);
        //we found the value we are looking for.
        else return true;
    }
    //computes height of the tree O(n)
    public int height() {
        return height(root);
    }
    // Recursive helper method to help find height of the tree
    private int height(Node node) {
        if(node == null) return 0;
        return Math.max(height(node.left), height(node.right)) + 1;
    }
}

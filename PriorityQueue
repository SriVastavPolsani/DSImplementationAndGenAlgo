using System;
using System.Collections.Generic;
					
public class Program
{
	public class PriorityQueue<T> where T: IComparable<T>
	{
		private readonly List<T> _pq = new List<T>();
		public int count => _pq.Count;
		
		public void Enqueue(T item)
		{
			_pq.Add(item);
			BubbleUp();
		}
		
		private void BubbleUp()
		{
			int childIndex = _pq.Count - 1;
			
			while(childIndex > 0)
			{
				int parentIndex = (childIndex-1)/2;
				if(_pq[parentIndex].CompareTo(_pq[childIndex])<=0)
					break;
				Swap(parentIndex, childIndex);
				childIndex = parentIndex;
			}
		}
		
		public T Dequeue()
		{
			var highestPrioritizedItem = _pq[0];
			
			MoveLastItemToTheTop();
			SinkDown();
			
			return highestPrioritizedItem;
		}
		
		private void MoveLastItemToTheTop()
		{
			var lastIndex = _pq.Count-1;
			_pq[0] = _pq[lastIndex];
			_pq.RemoveAt(lastIndex);
		}
		
		private void SinkDown(){
			var lastIndex = _pq.Count-1;
			var parentIndex = 0;
			
			while(true)
			{
				var firstChildIndex = parentIndex*2 + 1;
				if(firstChildIndex > lastIndex)
				{
					break;
				}
				var secondChildIndex = firstChildIndex + 1;
				if(secondChildIndex <= firstChildIndex && _pq[secondChildIndex].CompareTo(_pq[firstChildIndex]) < 0)
				{
					firstChildIndex = secondChildIndex;					
				}
				if(_pq[parentIndex].CompareTo(_pq[firstChildIndex]) < 0)
				{
					break;
				}
				Swap(parentIndex, firstChildIndex);
				parentIndex = firstChildIndex;
			}
		}
		
		public T Peek(){
			var highestPrioritizedItem = _pq[0];
			
			return highestPrioritizedItem; 
		}
		
		private void Swap(int index1, int index2){
			var temp = _pq[index1];
			_pq[index1] = _pq[index2];
			_pq[index2] = temp;		
		}
		
	}
	    
	
	public static void Main()
	{	
		PriorityQueue<string> testPQ = new PriorityQueue<string>();
		testPQ.Enqueue("sri");
		Console.WriteLine(testPQ.Peek()); 
	}
}
